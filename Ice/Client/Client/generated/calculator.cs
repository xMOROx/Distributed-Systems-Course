//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `calculator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Operations
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class DivisionByZero : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string reason;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.reason = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public DivisionByZero()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public DivisionByZero(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public DivisionByZero(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.reason = info.GetString("reason");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(string reason)
        {
            this.reason = reason;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public DivisionByZero(string reason)
        {
            _initDM(reason);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public DivisionByZero(string reason, global::System.Exception ex) : base(ex)
        {
            _initDM(reason);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::Operations::DivisionByZero";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Operations::DivisionByZero");
            global::IceInternal.HashUtil.hashAdd(ref h_, reason);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            DivisionByZero o = other as DivisionByZero;
            if(o == null)
            {
                return false;
            }
            if(this.reason == null)
            {
                if(o.reason != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.reason.Equals(o.reason))
                {
                    return false;
                }
            }
            return true;
        }

        #if !NET8_0_OR_GREATER
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("reason", this.reason == null ? "" : this.reason);

            base.GetObjectData(info, context);
        }
        #endif

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(DivisionByZero lhs, DivisionByZero rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(DivisionByZero lhs, DivisionByZero rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Operations::DivisionByZero", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class Person : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string name;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string email;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public double salary;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public Person()
        {
            this.name = "";
            this.email = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public Person(string name, string email, double salary)
        {
            this.name = name;
            this.email = email;
            this.salary = salary;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Operations::Person");
            global::IceInternal.HashUtil.hashAdd(ref h_, name);
            global::IceInternal.HashUtil.hashAdd(ref h_, email);
            global::IceInternal.HashUtil.hashAdd(ref h_, salary);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            Person o = (Person)other;
            if(this.name == null)
            {
                if(o.name != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.name.Equals(o.name))
                {
                    return false;
                }
            }
            if(this.email == null)
            {
                if(o.email != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.email.Equals(o.email))
                {
                    return false;
                }
            }
            if(!this.salary.Equals(o.salary))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(Person lhs, Person rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(Person lhs, Person rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.email);
            ostr.writeDouble(this.salary);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.name = istr.readString();
            this.email = istr.readString();
            this.salary = istr.readDouble();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, Person v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static Person ice_read(global::Ice.InputStream istr)
        {
            var v = new Person();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly Person _nullMarshalValue = new Person();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Calc : global::Ice.Object, CalcOperations_
    {
    }
}

namespace Operations
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Calc_add(long ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Calc_subtract(long ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Calc_multiply(long ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Calc_divide(long ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Calc_averageSalary(long ret);
}

namespace Operations
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface CalcPrx : global::Ice.ObjectPrx
    {
        long add(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<long> addAsync(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calc_add> begin_add(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_add(double a, double b, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_add(double a, double b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        long end_add(global::Ice.AsyncResult asyncResult);

        long subtract(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<long> subtractAsync(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calc_subtract> begin_subtract(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_subtract(double a, double b, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_subtract(double a, double b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        long end_subtract(global::Ice.AsyncResult asyncResult);

        long multiply(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<long> multiplyAsync(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calc_multiply> begin_multiply(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_multiply(double a, double b, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_multiply(double a, double b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        long end_multiply(global::Ice.AsyncResult asyncResult);

        long divide(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<long> divideAsync(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calc_divide> begin_divide(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_divide(double a, double b, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_divide(double a, double b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        long end_divide(global::Ice.AsyncResult asyncResult);

        long averageSalary(Person[] persons, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<long> averageSalaryAsync(Person[] persons, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calc_averageSalary> begin_averageSalary(Person[] persons, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_averageSalary(Person[] persons, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_averageSalary(Person[] persons, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        long end_averageSalary(global::Ice.AsyncResult asyncResult);
    }
}

namespace Operations
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface CalcOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        long add(double a, double b, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        long subtract(double a, double b, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        long multiply(double a, double b, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        long divide(double a, double b, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        long averageSalary(Person[] persons, global::Ice.Current current = null);
    }
}

namespace Operations
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class PersonListHelper
    {
        public static void write(global::Ice.OutputStream ostr, Person[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new Person() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static Person[] read(global::Ice.InputStream istr)
        {
            Person[] v;
            {
                int szx = istr.readAndCheckSeqSize(10);
                v = new Person[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new Person();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class CalcPrxHelper : global::Ice.ObjectPrxHelperBase, CalcPrx
    {
        public CalcPrxHelper()
        {
        }

        public CalcPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public long add(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_addAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long subtract(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_subtractAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long multiply(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_multiplyAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long divide(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_divideAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long averageSalary(Person[] persons, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_averageSalaryAsync(persons, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<long> addAsync(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_addAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_addAsync(double iceP_a, double iceP_b, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_add_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_add(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _add_name = "add";

        private void _iceI_add(double iceP_a, double iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _add_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(iceP_a);
                    ostr.writeDouble(iceP_b);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<long> subtractAsync(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_subtractAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_subtractAsync(double iceP_a, double iceP_b, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_subtract_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_subtract(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _subtract_name = "subtract";

        private void _iceI_subtract(double iceP_a, double iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _subtract_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(iceP_a);
                    ostr.writeDouble(iceP_b);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<long> multiplyAsync(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_multiplyAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_multiplyAsync(double iceP_a, double iceP_b, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_multiply_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_multiply(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _multiply_name = "multiply";

        private void _iceI_multiply(double iceP_a, double iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _multiply_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(iceP_a);
                    ostr.writeDouble(iceP_b);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<long> divideAsync(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_divideAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_divideAsync(double iceP_a, double iceP_b, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_divide_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_divide(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _divide_name = "divide";

        private void _iceI_divide(double iceP_a, double iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _divide_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(iceP_a);
                    ostr.writeDouble(iceP_b);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DivisionByZero)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<long> averageSalaryAsync(Person[] persons, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_averageSalaryAsync(persons, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_averageSalaryAsync(Person[] iceP_persons, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_averageSalary_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_averageSalary(iceP_persons, context, synchronous, completed);
            return completed.Task;
        }

        private const string _averageSalary_name = "averageSalary";

        private void _iceI_averageSalary(Person[] iceP_persons, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _averageSalary_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    PersonListHelper.write(ostr, iceP_persons);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Calc_add> begin_add(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_add(a, b, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_add(double a, double b, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_add(a, b, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_add(double a, double b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_add(a, b, context, callback, cookie, false);
        }

        public long end_add(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _add_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calc_add> begin_add(double iceP_a, double iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_add_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calc_add, long>(
                (Callback_Calc_add cb, long ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _add_name, cookie, completedCallback);
            _iceI_add(iceP_a, iceP_b, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Calc_subtract> begin_subtract(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_subtract(a, b, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_subtract(double a, double b, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_subtract(a, b, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_subtract(double a, double b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_subtract(a, b, context, callback, cookie, false);
        }

        public long end_subtract(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _subtract_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calc_subtract> begin_subtract(double iceP_a, double iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_subtract_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calc_subtract, long>(
                (Callback_Calc_subtract cb, long ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _subtract_name, cookie, completedCallback);
            _iceI_subtract(iceP_a, iceP_b, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Calc_multiply> begin_multiply(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_multiply(a, b, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_multiply(double a, double b, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_multiply(a, b, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_multiply(double a, double b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_multiply(a, b, context, callback, cookie, false);
        }

        public long end_multiply(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _multiply_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calc_multiply> begin_multiply(double iceP_a, double iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_multiply_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calc_multiply, long>(
                (Callback_Calc_multiply cb, long ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _multiply_name, cookie, completedCallback);
            _iceI_multiply(iceP_a, iceP_b, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Calc_divide> begin_divide(double a, double b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_divide(a, b, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_divide(double a, double b, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_divide(a, b, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_divide(double a, double b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_divide(a, b, context, callback, cookie, false);
        }

        public long end_divide(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _divide_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calc_divide> begin_divide(double iceP_a, double iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_divide_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calc_divide, long>(
                (Callback_Calc_divide cb, long ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _divide_name, cookie, completedCallback);
            _iceI_divide(iceP_a, iceP_b, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Calc_averageSalary> begin_averageSalary(Person[] persons, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_averageSalary(persons, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_averageSalary(Person[] persons, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_averageSalary(persons, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_averageSalary(Person[] persons, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_averageSalary(persons, context, callback, cookie, false);
        }

        public long end_averageSalary(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _averageSalary_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calc_averageSalary> begin_averageSalary(Person[] iceP_persons, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_averageSalary_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calc_averageSalary, long>(
                (Callback_Calc_averageSalary cb, long ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _averageSalary_name, cookie, completedCallback);
            _iceI_averageSalary(iceP_persons, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CalcPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CalcPrx r = b as CalcPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CalcPrxHelper h = new CalcPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalcPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CalcPrx r = b as CalcPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CalcPrxHelper h = new CalcPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalcPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CalcPrxHelper h = new CalcPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CalcPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CalcPrxHelper h = new CalcPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CalcPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CalcPrx r = b as CalcPrx;
            if(r == null)
            {
                CalcPrxHelper h = new CalcPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalcPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            CalcPrxHelper h = new CalcPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Operations::Calc"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CalcPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CalcPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CalcPrxHelper result = new CalcPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Operations
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class CalcDisp_ : global::Ice.ObjectImpl, Calc
    {
        #region Slice operations

        public abstract long add(double a, double b, global::Ice.Current current = null);

        public abstract long subtract(double a, double b, global::Ice.Current current = null);

        public abstract long multiply(double a, double b, global::Ice.Current current = null);

        public abstract long divide(double a, double b, global::Ice.Current current = null);

        public abstract long averageSalary(Person[] persons, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Operations::Calc"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_add(Calc obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            double iceP_a;
            double iceP_b;
            iceP_a = istr.readDouble();
            iceP_b = istr.readDouble();
            inS.endReadParams();
            var ret = obj.add(iceP_a, iceP_b, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_subtract(Calc obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            double iceP_a;
            double iceP_b;
            iceP_a = istr.readDouble();
            iceP_b = istr.readDouble();
            inS.endReadParams();
            var ret = obj.subtract(iceP_a, iceP_b, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_multiply(Calc obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            double iceP_a;
            double iceP_b;
            iceP_a = istr.readDouble();
            iceP_b = istr.readDouble();
            inS.endReadParams();
            var ret = obj.multiply(iceP_a, iceP_b, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_divide(Calc obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            double iceP_a;
            double iceP_b;
            iceP_a = istr.readDouble();
            iceP_b = istr.readDouble();
            inS.endReadParams();
            var ret = obj.divide(iceP_a, iceP_b, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_averageSalary(Calc obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            Person[] iceP_persons;
            iceP_persons = PersonListHelper.read(istr);
            inS.endReadParams();
            var ret = obj.averageSalary(iceP_persons, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "add",
            "averageSalary",
            "divide",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "multiply",
            "subtract"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_add(this, inS, current);
                }
                case 1:
                {
                    return iceD_averageSalary(this, inS, current);
                }
                case 2:
                {
                    return iceD_divide(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return iceD_multiply(this, inS, current);
                }
                case 8:
                {
                    return iceD_subtract(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
